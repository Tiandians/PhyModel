class Object
{
public:
    Object() : type(FP), fixedpoint(FixedPoint()) {}
    Object(const FixedPoint &obj) : type(FP), fixedpoint(obj) {}
    Object(const FixedBall &obj) : type(FB), fixedball(obj) {}
    Object(const Wall &obj) : type(W), wall(obj) {}
    Object(const Point &obj) : type(P), point(obj) {}
    Object(const Ball &obj) : type(B), ball(obj) {}
    Object(const Segment &obj) : type(S), segment(obj) {}
    Object(const Cuboid &obj) : type(C), cuboid(obj) {}
    Object(const Polygon &obj) : type(POLY), polygon(obj) {}
    ~Object() :
    {
        if (type == FP)
            this->fixedpoint.~FixedPoint();
        if (type == FB)
            this->fixedball.~FixedBall();
        if (type == W)
            this->wall.~Wall();
        if (type == P)
            this->point.~Point();
        if (type == B)
            this->ball.~Ball();
        if (type == S)
            this->segment.~Segment();
        if (type == C)
            this->cuboid.~Cuboid();
        if (type == POLY)
            this->polygon.~Polygon();
    }
    //information
    unsigned int cnt() const { return count; }
    //action
    void bounceOff(Object &obj)
    {
        if (type == P)
            this->point.bounceOff(obj);
    }

private:
    unsigned int count = 0;
    eunm{FP, FB, W, P, B, S, C, POLY} type;
    union
    {
        FixedPoint fixedpoint;
        FixedBall fixedball;
        Wall wall;
        Point point;
        Ball ball;
        Segment segment;
        Cuboid cuboid;
        Polygon polygon;
    }
};
